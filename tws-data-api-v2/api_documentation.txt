TWS Stock Data API - Frontend Developer Documentation
==========================================================

OVERVIEW
--------
The TWS Stock Data API is a FastAPI-based service that provides real-time stock price data from Interactive Brokers Trader Workstation (TWS). This API serves as a bridge between your frontend application and the TWS trading platform.

Base URL: http://localhost:8000 (configurable)
Protocol: HTTP/HTTPS
Authentication: None required
Data Format: JSON

IMPORTANT: The API requires TWS (Trader Workstation) to be running and connected to localhost:7497

API ENDPOINTS
=============

1. GET / - API Information
--------------------------
Returns basic information about the API.

Request:
  GET /

Response (200):
{
  "name": "TWS Stock Data API",
  "version": "1.0.0", 
  "description": "FastAPI application for retrieving real-time stock prices from Interactive Brokers TWS",
  "docs": "/docs",
  "health": "/health"
}

Example:
curl http://localhost:8000/


2. GET /health - Health Check
-----------------------------
Check if the API and TWS connection are working properly.

Request:
  GET /health

Response (200):
{
  "status": "healthy" | "degraded",
  "timestamp": "2024-01-15T10:30:00Z",
  "tws_connected": true | false
}

Status Values:
- "healthy": API is running and TWS is connected
- "degraded": API is running but TWS is not connected

Example:
curl http://localhost:8000/health


3. GET /stock/{symbol} - Single Stock Price
--------------------------------------------
Get real-time price data for a single stock symbol.

Request:
  GET /stock/{symbol}?exchange={exchange}&market_session={session}

Path Parameters:
- symbol (required): Stock symbol (1-10 characters, e.g., AAPL, MSFT, GOOGL)

Query Parameters:
- exchange (optional, default: "SMART"): Exchange to use
  Options: SMART, ISLAND, NYSE, NASDAQ, etc.
- market_session (optional): Filter by market session
  Options: pre_market, regular, post_market, extended

Response (200 - Success):
{
  "success": true,
  "data": {
    "symbol": "AAPL",
    "timestamp": "2024-01-15T10:30:00Z",
    "bid": 150.25,
    "ask": 150.27,
    "bid_size": 100,
    "ask_size": 200,
    "last_price": 150.26,
    "market_session": "regular",
    "exchange": "NASDAQ",
    "market_price": 150.26,
    "spread": 0.02
  },
  "message": "Stock price data retrieved successfully"
}

Response (404 - Not Found):
{
  "success": false,
  "error": "Stock symbol not found",
  "details": "Could not retrieve data for symbol: INVALID"
}

Response (503 - Service Unavailable):
{
  "success": false,
  "error": "TWS Connection Error",
  "details": "Unable to connect to TWS"
}

Examples:
curl http://localhost:8000/stock/AAPL
curl http://localhost:8000/stock/MSFT?exchange=NYSE
curl http://localhost:8000/stock/GOOGL?market_session=regular


4. GET /stocks - Multiple Stock Prices
---------------------------------------
Get real-time price data for multiple stock symbols in a single request.

Request:
  GET /stocks?symbols={symbols}&exchange={exchange}

Query Parameters:
- symbols (required): Comma-separated list of stock symbols
  Example: "AAPL,MSFT,GOOGL"
  Maximum: 20 symbols per request
- exchange (optional, default: "SMART"): Exchange to use for all symbols

Response (200 - Success):
{
  "success": true,
  "count": 3,
  "data": {
    "AAPL": {
      "success": true,
      "data": {
        "symbol": "AAPL",
        "timestamp": "2024-01-15T10:30:00Z",
        "bid": 150.25,
        "ask": 150.27,
        "bid_size": 100,
        "ask_size": 200,
        "last_price": 150.26,
        "market_session": "regular",
        "exchange": "NASDAQ",
        "market_price": 150.26,
        "spread": 0.02
      },
      "message": "Stock price retrieved successfully"
    },
    "MSFT": {
      "success": true,
      "data": { /* similar structure */ },
      "message": "Stock price retrieved successfully"
    },
    "INVALID": {
      "success": false,
      "data": null,
      "message": "Could not retrieve data for INVALID"
    }
  }
}

Response (400 - Bad Request):
{
  "success": false,
  "error": "Too many symbols",
  "details": "Maximum 20 symbols allowed per request"
}

Examples:
curl http://localhost:8000/stocks?symbols=AAPL,MSFT,GOOGL
curl http://localhost:8000/stocks?symbols=AAPL,MSFT&exchange=NYSE


5. Documentation Endpoints
---------------------------
Interactive API documentation (automatically generated by FastAPI):

GET /docs - Swagger UI interactive documentation
GET /redoc - ReDoc style documentation  
GET /openapi.json - OpenAPI schema in JSON format

DATA MODELS
===========

StockPrice Object
-----------------
{
  "symbol": string,           // Stock symbol (e.g., "AAPL")
  "timestamp": string,        // ISO 8601 timestamp
  "bid": number | null,       // Current bid price
  "ask": number | null,       // Current ask price  
  "bid_size": number | null,  // Number of shares at bid
  "ask_size": number | null,  // Number of shares at ask
  "last_price": number | null, // Last traded price
  "market_session": string,   // Market session type
  "exchange": string | null,  // Exchange name
  "market_price": number | null, // Calculated market price
  "spread": number | null     // Bid-ask spread
}

Market Session Values
---------------------
- "pre_market": Before regular trading hours (4:00 AM - 9:30 AM EST)
- "regular": Regular trading hours (9:30 AM - 4:00 PM EST)  
- "post_market": After regular trading hours (4:00 PM - 8:00 PM EST)
- "extended": Both pre and post market hours

Error Response Format
--------------------
{
  "success": false,
  "error": string,      // Brief error message
  "details": string     // Additional error details (optional)
}

HTTP STATUS CODES
================

200 OK: Request successful
400 Bad Request: Invalid parameters or request format
404 Not Found: Stock symbol not found
500 Internal Server Error: Server error
503 Service Unavailable: TWS connection error

INTEGRATION EXAMPLES
===================

JavaScript (Fetch API)
-----------------------
// Get single stock price
async function getStockPrice(symbol) {
  try {
    const response = await fetch(`http://localhost:8000/stock/${symbol}`);
    const data = await response.json();
    
    if (data.success) {
      console.log('Stock data:', data.data);
      return data.data;
    } else {
      console.error('Error:', data.error);
      return null;
    }
  } catch (error) {
    console.error('Network error:', error);
    return null;
  }
}

// Get multiple stock prices
async function getMultipleStocks(symbols) {
  try {
    const symbolsString = symbols.join(',');
    const response = await fetch(`http://localhost:8000/stocks?symbols=${symbolsString}`);
    const data = await response.json();
    
    if (data.success) {
      return data.data;
    } else {
      console.error('Error:', data.error);
      return null;
    }
  } catch (error) {
    console.error('Network error:', error);
    return null;
  }
}

// Check API health
async function checkHealth() {
  try {
    const response = await fetch('http://localhost:8000/health');
    const health = await response.json();
    return health.tws_connected;
  } catch (error) {
    console.error('Health check failed:', error);
    return false;
  }
}

JavaScript (Axios)
------------------
// Install: npm install axios
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8000',
  timeout: 10000
});

// Get stock price with error handling
async function getStockPrice(symbol) {
  try {
    const response = await api.get(`/stock/${symbol}`);
    return response.data;
  } catch (error) {
    if (error.response) {
      console.error('API Error:', error.response.data);
      return error.response.data;
    } else {
      console.error('Network Error:', error.message);
      return { success: false, error: 'Network error' };
    }
  }
}

React Hook Example
------------------
import { useState, useEffect } from 'react';

function useStockPrice(symbol) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!symbol) return;

    setLoading(true);
    setError(null);

    fetch(`http://localhost:8000/stock/${symbol}`)
      .then(response => response.json())
      .then(result => {
        if (result.success) {
          setData(result.data);
        } else {
          setError(result.error);
        }
      })
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  }, [symbol]);

  return { data, loading, error };
}

// Usage in component
function StockDisplay({ symbol }) {
  const { data, loading, error } = useStockPrice(symbol);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!data) return null;

  return (
    <div>
      <h3>{data.symbol}</h3>
      <p>Price: ${data.market_price}</p>
      <p>Bid: ${data.bid} ({data.bid_size})</p>
      <p>Ask: ${data.ask} ({data.ask_size})</p>
      <p>Session: {data.market_session}</p>
    </div>
  );
}

CURL Examples
-------------
# Get API info
curl -X GET http://localhost:8000/

# Health check
curl -X GET http://localhost:8000/health

# Single stock
curl -X GET http://localhost:8000/stock/AAPL

# Single stock with exchange
curl -X GET "http://localhost:8000/stock/AAPL?exchange=NYSE"

# Multiple stocks
curl -X GET "http://localhost:8000/stocks?symbols=AAPL,MSFT,GOOGL"

# Multiple stocks with exchange
curl -X GET "http://localhost:8000/stocks?symbols=AAPL,MSFT&exchange=NASDAQ"

ERROR HANDLING GUIDE
====================

Common Errors and Solutions:

1. 503 Service Unavailable
   - Cause: TWS is not running or not connected
   - Solution: Start TWS and ensure it's connected to localhost:7497

2. 404 Not Found
   - Cause: Invalid stock symbol
   - Solution: Verify the stock symbol is correct and tradeable

3. 400 Bad Request
   - Cause: Invalid parameters (empty symbols, too many symbols, etc.)
   - Solution: Check parameter format and limits

4. Network/Timeout Errors
   - Cause: API server not running or network issues
   - Solution: Ensure the API server is running on the correct port

Frontend Error Handling Pattern:
```javascript
async function safeApiCall(apiFunction, fallbackValue = null) {
  try {
    const result = await apiFunction();
    return result;
  } catch (error) {
    console.error('API call failed:', error);
    // Log error, show user notification, return fallback
    return fallbackValue;
  }
}
```

RATE LIMITING & BEST PRACTICES
==============================

1. **Batch Requests**: Use /stocks endpoint for multiple symbols instead of multiple /stock requests
2. **Error Handling**: Always check the 'success' field in responses
3. **Health Monitoring**: Periodically check /health to monitor TWS connection
4. **Caching**: Consider caching responses briefly (5-10 seconds) for repeated requests
5. **Timeouts**: Set reasonable timeouts for API requests (10-30 seconds)
6. **Symbol Validation**: Validate stock symbols on the frontend before sending requests

CONFIGURATION
=============

Default Settings:
- API Host: localhost
- API Port: 8000
- TWS Host: localhost  
- TWS Port: 7497
- Max symbols per request: 20
- CORS origins: localhost:3000, 127.0.0.1:3000

These can be configured via environment variables in the .env file.

TROUBLESHOOTING
===============

Q: Getting 503 errors constantly?
A: Ensure TWS is running and connected. Check the /health endpoint.

Q: Stock prices seem delayed or incorrect?
A: Check your TWS market data subscriptions and connection status.

Q: CORS errors in browser?
A: The API allows localhost:3000 by default. Add your domain to CORS settings if needed.

Q: API not responding?
A: Check if the FastAPI server is running on the correct port.

For additional help, check the interactive documentation at /docs when the API is running.